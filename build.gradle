buildscript {
    ext.kotlin_version = '1.3.31'
    ext.spring_boot_version = '2.1.11.RELEASE'
    ext.blackDuckCommonVersion = '54.2.1'

    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-repositories.gradle', to: buildscript
    apply from: 'https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-dependencies.gradle', to: buildscript
}

plugins {
    id 'java'
    id 'groovy'
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id("maven-publish")
}

version = '8.0.0-SNAPSHOT'
final String parentVersion = project.version

final String artifactoryMinimumVersion = '6.1.0'

apply plugin: 'com.synopsys.integration.solution'

license {
    header rootProject.file('LICENSE')
}

dependencies {
    compile project("blackduck-artifactory-common")

    implementation 'org.codehaus.groovy:groovy-all:2.4.15'
    implementation "com.synopsys.integration:blackduck-common:${blackDuckCommonVersion}"

    compileOnly 'org.artifactory:artifactory-papi:' + artifactoryMinimumVersion
    testCompile 'org.artifactory:artifactory-papi:' + artifactoryMinimumVersion

    testImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
}

def versionFile = new File("${projectDir}/src/main/resources/version.txt")
versionFile.delete()
versionFile << version

apply from: 'generateConfig.gradle'

publishing {
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/linanqiu/blackduck-artifactory")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

final String folderName = "blackduck-artifactory-$version"

task createFinalZip(type: Zip) {
    dependsOn build, generateConfig

    from("${projectDir}/src/main/resources/") {
        include 'version.txt'
        into "$folderName/lib"
    }

    from("${projectDir}/build/configs/") {
        include 'blackDuckPlugin.properties'
        into "$folderName/lib"
    }

    from("${projectDir}/src/main/groovy/com/synopsys/integration/blackduck/artifactory") {
        include 'blackDuckPlugin.groovy'
        into "$folderName"
    }

    from(configurations.compile) {
        include 'blackduck-artifactory-common*.jar'
        into "$folderName/lib"
    }
}

task createFinalTar(type: Tar) {
    dependsOn build, generateConfig
    from("${projectDir}/src/main/resources/") {
        include 'version.txt'
        into "$folderName/lib"
    }

    from("${projectDir}/build/configs/") {
        include 'blackDuckPlugin.properties'
        into "$folderName/lib"
    }

    from("${projectDir}/src/main/groovy/com/synopsys/integration/blackduck/artifactory") {
        include 'blackDuckPlugin.groovy'
        into "$folderName"
    }

    from(configurations.compile) {
        include 'blackduck-artifactory-common*.jar'
        into "$folderName/lib"
    }

    compression = Compression.GZIP
}

createFinalZip.finalizedBy createFinalTar
build.finalizedBy createFinalZip

configure(subprojects) { project ->
    group = 'com.synopsys.integration'
    version = parentVersion
    dependencies {
        ext.artifactoryMinimumVersion = artifactoryMinimumVersion
        ext.blackDuckCommonVersion = blackDuckCommonVersion
    }
}

subprojects {
    tasks.withType(Test) {
        maxParallelForks = 4 // Do not allow parrallel forks otherwise the automation tests may attempt to spin up multiple Artifactory instances.
    }
}
