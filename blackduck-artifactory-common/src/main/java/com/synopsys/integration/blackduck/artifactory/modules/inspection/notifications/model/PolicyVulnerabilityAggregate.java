/**
 * blackduck-artifactory-common
 *
 * Copyright (c) 2019 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model;

import javax.annotation.Nullable;

import org.apache.commons.lang3.StringUtils;

import com.synopsys.integration.blackduck.api.generated.enumeration.PolicySummaryStatusType;

public class PolicyVulnerabilityAggregate {
    private static final String NO_VULNERABILITY_AGGREGATE_MESSAGE = "An error occurred retrieving vulnerabilities for this component";
    private static final String NO_POLICY_STATUS_MESSAGE = "An error occurred retrieving policy status for this component";

    private final VulnerabilityAggregate vulnerabilityAggregate;
    private final PolicySummaryStatusType policySummaryStatusType;
    private final String componentVersionUrl;

    public PolicyVulnerabilityAggregate(@Nullable final VulnerabilityAggregate vulnerabilityAggregate, @Nullable final PolicySummaryStatusType policySummaryStatusType, @Nullable final String componentVersionUrl) {
        this.vulnerabilityAggregate = vulnerabilityAggregate;
        this.policySummaryStatusType = policySummaryStatusType;
        this.componentVersionUrl = componentVersionUrl;
    }

    public boolean hasVulnerabilityData() {
        return vulnerabilityAggregate != null;
    }

    public boolean hasPolicyData() {
        return policySummaryStatusType != null;
    }

    public String getHighVulnerabilities() {
        if (vulnerabilityAggregate == null) {
            return NO_VULNERABILITY_AGGREGATE_MESSAGE;
        }
        return vulnerabilityAggregate.getHighSeverityCountAsString();
    }

    public String getMediumVulnerabilities() {
        if (vulnerabilityAggregate == null) {
            return NO_VULNERABILITY_AGGREGATE_MESSAGE;
        }
        return vulnerabilityAggregate.getMediumSeverityCountAsString();
    }

    public String getLowVulnerabilities() {
        if (vulnerabilityAggregate == null) {
            return NO_VULNERABILITY_AGGREGATE_MESSAGE;
        }
        return vulnerabilityAggregate.getLowSeverityCountAsString();
    }

    public String getPolicySummaryStatusType() {
        if (policySummaryStatusType == null) {
            return NO_POLICY_STATUS_MESSAGE;
        }
        return policySummaryStatusType.name();
    }

    public String getComponentVersionUrl() {
        if (StringUtils.isBlank(componentVersionUrl)) {
            return "Unavailable";
        }
        return componentVersionUrl;
    }

    public static class Builder {
        private VulnerabilityAggregate vulnerabilityAggregate;
        private PolicySummaryStatusType policySummaryStatusType;
        private String componentVersionUrl;

        public PolicyVulnerabilityAggregate build() {
            return new PolicyVulnerabilityAggregate(vulnerabilityAggregate, policySummaryStatusType, componentVersionUrl);
        }

        public void setVulnerabilityAggregate(final VulnerabilityAggregate vulnerabilityAggregate) {
            this.vulnerabilityAggregate = vulnerabilityAggregate;
        }

        public void setPolicySummaryStatusType(final PolicySummaryStatusType policySummaryStatusType) {
            this.policySummaryStatusType = policySummaryStatusType;
        }

        public void setComponentVersionUrl(final String componentVersionUrl) {
            this.componentVersionUrl = componentVersionUrl;
        }
    }
}
