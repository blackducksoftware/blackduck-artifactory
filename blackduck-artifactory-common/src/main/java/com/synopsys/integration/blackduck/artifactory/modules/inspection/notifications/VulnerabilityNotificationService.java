/*
 * blackduck-artifactory-common
 *
 * Copyright (c) 2022 Synopsys, Inc.
 *
 * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications;

import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.UserView;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationUserView;
import com.synopsys.integration.blackduck.service.BlackDuckApiClient;
import com.synopsys.integration.blackduck.service.dataservice.NotificationService;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.rest.HttpUrl;

public class VulnerabilityNotificationService {
    private final BlackDuckApiClient blackDuckApiClient;
    private final NotificationService notificationService;

    public VulnerabilityNotificationService(BlackDuckApiClient blackDuckApiClient, NotificationService notificationService) {
        this.blackDuckApiClient = blackDuckApiClient;
        this.notificationService = notificationService;
    }

    public List<VulnerabilityNotificationUserView> fetchVulnerabilityNotifications(Date startDate, Date endDate) throws IntegrationException {
        UserView currentUser = blackDuckApiClient.getResponse(ApiDiscovery.CURRENT_USER_LINK_RESPONSE);
        return notificationService.getFilteredUserNotifications(currentUser, startDate, endDate, Collections.singletonList(NotificationType.VULNERABILITY.toString())).stream()
                   .filter(VulnerabilityNotificationUserView.class::isInstance)
                   .map(VulnerabilityNotificationUserView.class::cast)
                   .collect(Collectors.toList());
    }

    public ComponentVersionView fetchComponentVersionView(VulnerabilityNotificationContent content) throws IntegrationException {
        return blackDuckApiClient.getResponse(new HttpUrl(content.getComponentVersion()), ComponentVersionView.class);
    }

    public List<VulnerabilityView> fetchVulnerabilitiesForComponent(ComponentVersionView componentVersionView) throws IntegrationException {
        Optional<HttpUrl> vulnerabilitiesLink = componentVersionView.getFirstLinkSafely(ComponentVersionView.VULNERABILITIES_LINK);

        if (vulnerabilitiesLink.isPresent()) {
            return blackDuckApiClient.getAllResponses(vulnerabilitiesLink.get(), VulnerabilityView.class);
        } else {
            throw new IntegrationException(String.format("Missing the required %s link for component %s.", ComponentVersionView.VULNERABILITIES_LINK, componentVersionView.getHref()));
        }
    }
}
