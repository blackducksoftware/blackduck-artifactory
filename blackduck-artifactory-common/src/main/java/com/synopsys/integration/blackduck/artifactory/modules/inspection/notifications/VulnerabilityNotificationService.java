/**
 * blackduck-artifactory-common
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications;

import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.UserView;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationUserView;
import com.synopsys.integration.blackduck.service.BlackDuckApiClient;
import com.synopsys.integration.blackduck.service.dataservice.NotificationService;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.rest.HttpUrl;

public class VulnerabilityNotificationService {
    private final BlackDuckApiClient blackDuckApiClient;
    private final NotificationService notificationService;

    public VulnerabilityNotificationService(BlackDuckApiClient blackDuckApiClient, NotificationService notificationService) {
        this.blackDuckApiClient = blackDuckApiClient;
        this.notificationService = notificationService;
    }

    public List<VulnerabilityNotificationUserView> fetchVulnerabilityNotifications(Date startDate, Date endDate) throws IntegrationException {
        UserView currentUser = blackDuckApiClient.getResponse(ApiDiscovery.CURRENT_USER_LINK_RESPONSE);
        return notificationService.getFilteredUserNotifications(currentUser, startDate, endDate, Collections.singletonList(NotificationType.VULNERABILITY.toString())).stream()
                   .filter(VulnerabilityNotificationUserView.class::isInstance)
                   .map(VulnerabilityNotificationUserView.class::cast)
                   .collect(Collectors.toList());
    }

    public ComponentVersionView fetchComponentVersionView(VulnerabilityNotificationContent content) throws IntegrationException {
        return blackDuckApiClient.getResponse(new HttpUrl(content.getComponentVersion()), ComponentVersionView.class);
    }

    public List<VulnerabilityView> fetchVulnerabilitiesForComponent(ComponentVersionView componentVersionView) throws IntegrationException {
        Optional<HttpUrl> vulnerabilitiesLink = componentVersionView.getFirstLinkSafely(ComponentVersionView.VULNERABILITIES_LINK);

        if (vulnerabilitiesLink.isPresent()) {
            return blackDuckApiClient.getAllResponses(vulnerabilitiesLink.get(), VulnerabilityView.class);
        } else {
            throw new IntegrationException(String.format("Missing the required %s link for component %s.", ComponentVersionView.VULNERABILITIES_LINK, componentVersionView.getHref()));
        }
    }
}
