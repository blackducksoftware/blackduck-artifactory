/*
 * blackduck-artifactory-common
 *
 * Copyright (c) 2022 Synopsys, Inc.
 *
 * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model;

import java.util.EnumMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.ObjectUtils;

import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;

public class VulnerabilityAggregate {
    private final Map<VulnerabilitySeverityType, Integer> severityCountMap;

    public static VulnerabilityAggregate fromVulnerabilityViews(List<VulnerabilityView> vulnerabilityViews) {
        Map<VulnerabilitySeverityType, Integer> severityCountMap = new EnumMap<>(VulnerabilitySeverityType.class);
        for (VulnerabilitySeverityType severityType : VulnerabilitySeverityType.values()) {
            severityCountMap.put(severityType, 0);
        }

        for (VulnerabilityView vulnerability : vulnerabilityViews) {
            VulnerabilitySeverityType severityType;
            if (Boolean.TRUE.equals(vulnerability.getUseCvss3())) {
                severityType = vulnerability.getCvss3().getSeverity();
            } else {
                severityType = vulnerability.getCvss2().getSeverity();
            }

            int newCount = ObjectUtils.defaultIfNull(severityCountMap.get(severityType), 0) + 1;
            severityCountMap.put(severityType, newCount);
        }

        return new VulnerabilityAggregate(severityCountMap);
    }

    public VulnerabilityAggregate(Map<VulnerabilitySeverityType, Integer> severityCountMap) {
        this.severityCountMap = severityCountMap;
    }

    public Integer getSeverityCount(VulnerabilitySeverityType severityType) {
        return severityCountMap.get(severityType);
    }

    public int getCriticalSeverityCount() {
        return getSeverityCount(VulnerabilitySeverityType.CRITICAL);
    }

    public int getHighSeverityCount() {
        return getSeverityCount(VulnerabilitySeverityType.HIGH);
    }

    public int getMediumSeverityCount() {
        return getSeverityCount(VulnerabilitySeverityType.MEDIUM);
    }

    public int getLowSeverityCount() {
        return getSeverityCount(VulnerabilitySeverityType.LOW);
    }
}
