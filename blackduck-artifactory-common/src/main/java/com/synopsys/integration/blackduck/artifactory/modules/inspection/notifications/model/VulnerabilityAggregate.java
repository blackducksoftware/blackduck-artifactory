/**
 * blackduck-artifactory-common
 *
 * Copyright (c) 2020 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.ObjectUtils;

import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;

public class VulnerabilityAggregate {
    private final Map<ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType, Integer> severityCountMap;

    public static VulnerabilityAggregate fromVulnerabilityViews(List<VulnerabilityView> vulnerabilityViews) {
        Map<ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType, Integer> severityCountMap = new HashMap<>();
        for (ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType severityType : ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType.values()) {
            severityCountMap.put(severityType, 0);
        }

        for (VulnerabilityView vulnerability : vulnerabilityViews) {
            ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType severityType;
            if (Boolean.TRUE.equals(vulnerability.getUseCvss3())) {
                severityType = vulnerability.getCvss3().getSeverity();
            } else {
                severityType = vulnerability.getCvss2().getSeverity();
            }

            int newCount = ObjectUtils.defaultIfNull(severityCountMap.get(severityType), 0);
            severityCountMap.put(severityType, newCount);
        }

        return new VulnerabilityAggregate(severityCountMap);
    }

    public VulnerabilityAggregate(Map<ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType, Integer> severityCountMap) {
        this.severityCountMap = severityCountMap;
    }

    public Integer getSeverityCount(ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType severityType) {
        return severityCountMap.get(severityType);
    }

    public int getCriticalSeverityCount() {
        return getSeverityCount(ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType.CRITICAL);
    }

    public int getHighSeverityCount() {
        return getSeverityCount(ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType.HIGH);
    }

    public int getMediumSeverityCount() {
        return getSeverityCount(ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType.MEDIUM);
    }

    public int getLowSeverityCount() {
        return getSeverityCount(ProjectVersionVulnerableBomComponentsItemsVulnerabilityWithRemediationSeverityType.LOW);
    }
}
