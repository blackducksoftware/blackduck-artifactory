/**
 * blackduck-artifactory-common
 *
 * Copyright (c) 2020 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model;

import java.util.List;

import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;

public class VulnerabilityAggregate {
    private final int highSeverityCount;
    private final int mediumSeverityCount;
    private final int lowSeverityCount;

    public static VulnerabilityAggregate fromVulnerabilityViews(List<VulnerabilityView> vulnerabilityViews) {
        int highSeverityCount = 0;
        int mediumSeverityCount = 0;
        int lowSeverityCount = 0;
        for (VulnerabilityView vulnerability : vulnerabilityViews) {
            if ("HIGH".equals(vulnerability.getSeverity())) {
                highSeverityCount++;
            } else if ("MEDIUM".equals(vulnerability.getSeverity())) {
                mediumSeverityCount++;
            } else if ("LOW".equals(vulnerability.getSeverity())) {
                lowSeverityCount++;
            }
        }

        return new VulnerabilityAggregate(highSeverityCount, mediumSeverityCount, lowSeverityCount);
    }

    public VulnerabilityAggregate(int highSeverityCount, int mediumSeverityCount, int lowSeverityCount) {
        this.highSeverityCount = highSeverityCount;
        this.mediumSeverityCount = mediumSeverityCount;
        this.lowSeverityCount = lowSeverityCount;
    }

    public int getHighSeverityCount() {
        return highSeverityCount;
    }

    public int getMediumSeverityCount() {
        return mediumSeverityCount;
    }

    public int getLowSeverityCount() {
        return lowSeverityCount;
    }
}
