package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.processor;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.artifactory.repo.RepoPath;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.synopsys.integration.blackduck.api.UriSingleResponse;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationUserView;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.NotificationRepositoryFilter;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model.VulnerabilityAggregate;
import com.synopsys.integration.blackduck.service.BlackDuckService;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.util.NameVersion;

public class VulnerabilityProcessor {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    private final BlackDuckService blackDuckService;

    public VulnerabilityProcessor(BlackDuckService blackDuckService) {
        this.blackDuckService = blackDuckService;
    }

    public List<ProcessedVulnerabilityNotification> processVulnerabilityNotifications(List<VulnerabilityNotificationUserView> notificationUserViews, NotificationRepositoryFilter repositoryFilter) throws IntegrationException {
        List<ProcessedVulnerabilityNotification> processedPolicyNotifications = new ArrayList<>();
        for (VulnerabilityNotificationUserView notificationUserView : notificationUserViews) {
            processVulnerabilityNotification(notificationUserView, repositoryFilter)
                .ifPresent(processedPolicyNotifications::add);
        }
        return processedPolicyNotifications;
    }

    public Optional<ProcessedVulnerabilityNotification> processVulnerabilityNotification(VulnerabilityNotificationUserView notificationUserView, NotificationRepositoryFilter repositoryFilter) throws IntegrationException {
        VulnerabilityNotificationContent content = notificationUserView.getContent();
        List<RepoPath> affectRepoKeyPaths = content.getAffectedProjectVersions().stream()
                                                .map(affectedProjectVersion -> new NameVersion(affectedProjectVersion.getProjectName(), affectedProjectVersion.getProjectVersionName()))
                                                .map(repositoryFilter::getRepoKeyPath)
                                                .filter(Optional::isPresent)
                                                .map(Optional::get)
                                                .collect(Collectors.toList());

        String componentName = content.getComponentName();
        UriSingleResponse<ComponentVersionView> componentVersionViewUri = new UriSingleResponse<>(content.getComponentVersion(), ComponentVersionView.class);
        ComponentVersionView componentVersionView = blackDuckService.getResponse(componentVersionViewUri);
        Optional<String> vulnerabilitiesLink = componentVersionView.getFirstLink(ComponentVersionView.VULNERABILITIES_LINK);
        String componentVersionName = componentVersionView.getVersionName();

        ProcessedVulnerabilityNotification processedNotification = null;
        if (vulnerabilitiesLink.isPresent()) {
            List<VulnerabilityView> componentVulnerabilities = blackDuckService.getAllResponses(vulnerabilitiesLink.get(), VulnerabilityView.class);
            VulnerabilityAggregate vulnerabilityAggregate = VulnerabilityAggregate.fromVulnerabilityViews(componentVulnerabilities);
            processedNotification = new ProcessedVulnerabilityNotification(componentName, componentVersionName, affectRepoKeyPaths, vulnerabilityAggregate);
        } else {
            logger.warn("No vulnerabilities link present for notification that affects r"); // TODO: Finish logging.
        }

        return Optional.ofNullable(processedNotification);
    }

}
