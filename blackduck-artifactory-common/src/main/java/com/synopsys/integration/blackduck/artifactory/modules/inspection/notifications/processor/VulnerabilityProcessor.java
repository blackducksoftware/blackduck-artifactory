/**
 * blackduck-artifactory-common
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.processor;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.artifactory.repo.RepoPath;

import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationUserView;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.RepositoryProjectNameLookup;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.VulnerabilityNotificationService;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model.VulnerabilityAggregate;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.util.NameVersion;

public class VulnerabilityProcessor {
    private final VulnerabilityNotificationService vulnerabilityNotificationService;

    public VulnerabilityProcessor(VulnerabilityNotificationService vulnerabilityNotificationService) {
        this.vulnerabilityNotificationService = vulnerabilityNotificationService;
    }

    public List<ProcessedVulnerabilityNotification> processVulnerabilityNotifications(List<VulnerabilityNotificationUserView> notificationUserViews, RepositoryProjectNameLookup repositoryFilter) throws IntegrationException {
        List<ProcessedVulnerabilityNotification> processedPolicyNotifications = new ArrayList<>();
        for (VulnerabilityNotificationUserView notificationUserView : notificationUserViews) {
            processVulnerabilityNotification(notificationUserView, repositoryFilter)
                .ifPresent(processedPolicyNotifications::add);
        }
        return processedPolicyNotifications;
    }

    private Optional<ProcessedVulnerabilityNotification> processVulnerabilityNotification(VulnerabilityNotificationUserView notificationUserView, RepositoryProjectNameLookup repositoryFilter) throws IntegrationException {
        VulnerabilityNotificationContent content = notificationUserView.getContent();
        List<RepoPath> affectRepoKeyPaths = content.getAffectedProjectVersions().stream()
                                                .map(affectedProjectVersion -> new NameVersion(affectedProjectVersion.getProjectName(), affectedProjectVersion.getProjectVersionName()))
                                                .map(repositoryFilter::getRepoKeyPath)
                                                .filter(Optional::isPresent)
                                                .map(Optional::get)
                                                .collect(Collectors.toList());

        ProcessedVulnerabilityNotification processedNotification = null;
        if (!affectRepoKeyPaths.isEmpty()) {
            String componentName = content.getComponentName();
            ComponentVersionView componentVersionView = vulnerabilityNotificationService.fetchComponentVersionView(content);
            String componentVersionName = componentVersionView.getVersionName();
            List<VulnerabilityView> vulnerabilityViews = vulnerabilityNotificationService.fetchVulnerabilitiesForComponent(componentVersionView);
            VulnerabilityAggregate vulnerabilityAggregate = VulnerabilityAggregate.fromVulnerabilityViews(vulnerabilityViews);
            processedNotification = new ProcessedVulnerabilityNotification(componentName, componentVersionName, affectRepoKeyPaths, vulnerabilityAggregate);
        }

        return Optional.ofNullable(processedNotification);
    }

}
