/*
 * blackduck-artifactory-common
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.processor;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.artifactory.repo.RepoPath;

import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationUserView;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.RepositoryProjectNameLookup;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.VulnerabilityNotificationService;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model.VulnerabilityAggregate;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.util.NameVersion;

public class VulnerabilityProcessor {
    private final VulnerabilityNotificationService vulnerabilityNotificationService;

    public VulnerabilityProcessor(VulnerabilityNotificationService vulnerabilityNotificationService) {
        this.vulnerabilityNotificationService = vulnerabilityNotificationService;
    }

    public List<ProcessedVulnerabilityNotification> processVulnerabilityNotifications(List<VulnerabilityNotificationUserView> notificationUserViews, RepositoryProjectNameLookup repositoryFilter) throws IntegrationException {
        List<ProcessedVulnerabilityNotification> processedPolicyNotifications = new ArrayList<>();
        for (VulnerabilityNotificationUserView notificationUserView : notificationUserViews) {
            processVulnerabilityNotification(notificationUserView, repositoryFilter)
                .ifPresent(processedPolicyNotifications::add);
        }
        return processedPolicyNotifications;
    }

    private Optional<ProcessedVulnerabilityNotification> processVulnerabilityNotification(VulnerabilityNotificationUserView notificationUserView, RepositoryProjectNameLookup repositoryFilter) throws IntegrationException {
        VulnerabilityNotificationContent content = notificationUserView.getContent();
        List<RepoPath> affectRepoKeyPaths = content.getAffectedProjectVersions().stream()
                                                .map(affectedProjectVersion -> new NameVersion(affectedProjectVersion.getProjectName(), affectedProjectVersion.getProjectVersionName()))
                                                .map(repositoryFilter::getRepoKeyPath)
                                                .filter(Optional::isPresent)
                                                .map(Optional::get)
                                                .collect(Collectors.toList());

        ProcessedVulnerabilityNotification processedNotification = null;
        if (!affectRepoKeyPaths.isEmpty()) {
            String componentName = content.getComponentName();
            ComponentVersionView componentVersionView = vulnerabilityNotificationService.fetchComponentVersionView(content);
            String componentVersionName = componentVersionView.getVersionName();
            List<VulnerabilityView> vulnerabilityViews = vulnerabilityNotificationService.fetchVulnerabilitiesForComponent(componentVersionView);
            VulnerabilityAggregate vulnerabilityAggregate = VulnerabilityAggregate.fromVulnerabilityViews(vulnerabilityViews);
            processedNotification = new ProcessedVulnerabilityNotification(componentName, componentVersionName, affectRepoKeyPaths, vulnerabilityAggregate);
        }

        return Optional.ofNullable(processedNotification);
    }

}
