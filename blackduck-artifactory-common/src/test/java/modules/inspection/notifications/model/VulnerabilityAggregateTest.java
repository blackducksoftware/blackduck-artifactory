/*
 * blackduck-artifactory-common
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package modules.inspection.notifications.model;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import com.synopsys.integration.blackduck.api.generated.component.VulnerabilityCvss2View;
import com.synopsys.integration.blackduck.api.generated.component.VulnerabilityCvss3View;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.artifactory.modules.inspection.notifications.model.VulnerabilityAggregate;

class VulnerabilityAggregateTest {
    @Test
    void fromVulnerabilityViews() {
        List<VulnerabilityView> vulnerabilityViews = Arrays.asList(
            createVulnerabilityView(VulnerabilitySeverityType.LOW),
            createVulnerabilityView(VulnerabilitySeverityType.MEDIUM),
            createVulnerabilityView(VulnerabilitySeverityType.MEDIUM),
            createVulnerabilityView(VulnerabilitySeverityType.HIGH),
            createVulnerabilityView(VulnerabilitySeverityType.HIGH),
            createVulnerabilityView(VulnerabilitySeverityType.HIGH),
            createVulnerabilityView(VulnerabilitySeverityType.CRITICAL),
            createVulnerabilityView(VulnerabilitySeverityType.CRITICAL),
            createVulnerabilityView(VulnerabilitySeverityType.CRITICAL, false),
            createVulnerabilityView(VulnerabilitySeverityType.CRITICAL, true)
        );

        try {
            VulnerabilityAggregate vulnerabilityAggregate = VulnerabilityAggregate.fromVulnerabilityViews(vulnerabilityViews);

            Assertions.assertEquals(1, vulnerabilityAggregate.getLowSeverityCount());
            Assertions.assertEquals(2, vulnerabilityAggregate.getMediumSeverityCount());
            Assertions.assertEquals(3, vulnerabilityAggregate.getHighSeverityCount());
            Assertions.assertEquals(4, vulnerabilityAggregate.getCriticalSeverityCount());
        } catch (NullPointerException exception) {
            Assertions.fail("VulnerabilityAggregate likely used the wrong Cvss type.", exception);
        }
    }

    @Test
    void allValuesUsed() {
        for (VulnerabilitySeverityType severityType : VulnerabilitySeverityType.values()) {
            switch (severityType) {
                case LOW:
                case MEDIUM:
                case HIGH:
                case CRITICAL:
                    break;
                default:
                    Assertions.fail("A severity type supported by Black Duck (" + severityType.name() + ") is currently not supported by the plugin.");
            }
        }
    }

    private VulnerabilityView createVulnerabilityView(VulnerabilitySeverityType severityType) {
        return createVulnerabilityView(severityType, false);
    }

    private VulnerabilityView createVulnerabilityView(VulnerabilitySeverityType severityType, boolean useCvss3) {
        VulnerabilityView vulnerabilityView = new VulnerabilityView();
        vulnerabilityView.setSeverity(severityType);
        vulnerabilityView.setUseCvss3(useCvss3);

        // Expect a NullPointerException if the VulnerabilityAggregate uses the wrong cvss type.
        VulnerabilityCvss2View cvss2 = new VulnerabilityCvss2View();
        if (!useCvss3) {
            cvss2.setSeverity(severityType);
        }
        vulnerabilityView.setCvss2(cvss2);

        VulnerabilityCvss3View cvss3 = new VulnerabilityCvss3View();
        if (useCvss3) {
            cvss3.setSeverity(severityType);
        }
        vulnerabilityView.setCvss3(cvss3);

        return vulnerabilityView;
    }
}
